{"version":3,"sources":["component/Square.js","component/CalculateWinner.js","component/Board.js","component/Game.js","component/Navbar.js","component/EmojiCard.js","pages/Emoji.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","CalculateWinner","squares","lines","i","length","_lines$i","Object","slicedToArray","b","c","Board","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Array","fill","xIsNext","slice","Calculate","setState","_this2","component_Square","handleClick","status","winner","renderSquare","React","Component","Game","component_Board","Navbar","EmojiCard","icon","Emoji","EmojiDataMap","EmojiData","map","component_EmojiCard","key","id","console","log","App","component_Navbar","component_Game","pages_Emoji","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d511ba6.chunk.js","sourcesContent":["import React from 'react';\r\nimport SquareCss from '../css/Square.css';\r\n\r\nfunction Square(props){\r\n    \r\n    \r\n        return (\r\n            //onClick arrow function anonymous function\r\n            <button className=\"square\" \r\n            onClick={props.onClick}>  \r\n                {props.value}\r\n\r\n            </button>\r\n        );\r\n    }\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nfunction CalculateWinner(squares){\r\n    const lines=[\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ];\r\n\r\n    for(let i=0; i<lines.length; i++) {\r\n        const[a,b,c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\nexport default CalculateWinner;","import React from 'react';\r\nimport Square from './Square';\r\nimport Calculate from './CalculateWinner';\r\nimport BoardCss from '../css/Board.css';\r\n//import WinnerBlurb from '../component/WinnerBlurb';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null),\r\n            xIsNext: true,  //It will flips to Determines which player goes next.\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const squares = this.state.squares.slice();\r\n        if (Calculate(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? '😀' : '😩';  //declaring xIsNext to player \"smile\" or \"sad\"\r\n        this.setState({\r\n            squares: squares,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return (<Square value={this.state.squares[i]}\r\n            onClick={() => this.handleClick(i)} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const winner = Calculate(this.state.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Player: ' + (this.state.xIsNext ? '😀' : '😩');\r\n        }\r\n\r\n    \r\n    return(\r\n        <div>        \r\n    <div className=\"status\">{status}\r\n    </div>\r\n    <div className=\"board-row\">\r\n        {this.renderSquare(0)}\r\n        {this.renderSquare(1)}\r\n        {this.renderSquare(2)}\r\n    </div>\r\n    <div className=\"board-row\">\r\n        {this.renderSquare(3)}\r\n        {this.renderSquare(4)}\r\n        {this.renderSquare(5)}\r\n    </div>\r\n    <div className=\"board-row\">\r\n        {this.renderSquare(6)}\r\n        {this.renderSquare(7)}\r\n        {this.renderSquare(8)}\r\n    </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Board;","import React from 'react';\r\nimport Styles from '../css/Styles.css';\r\nimport Board from './Board';\r\nimport BoardCss from '../css/Game.css';\r\n//import Navbar from '../component/Navbar';\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            \r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Game;","import React from 'react';\r\nimport \"../css/Navbar.css\";\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <div className=\"Navbar\">\r\n            \r\n              <h1> Welcome to Icon Tic-Tac-Toe </h1>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\n\r\nfunction EmojiCard (props){\r\n\r\n    return(\r\n        <div className=\"icon-container\">\r\n            <p className=\"icon\">{props.icon} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmojiCard;","import React from 'react';\r\nimport EmojiCard from '../component/EmojiCard';\r\nimport EmojiData from '../component/EmojiData';\r\n\r\nclass Emoji extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n    //     const EmojiIcon = [\r\n    //     \"😀\", \"😂\",\"😎\",\r\n    //     \"😍\", \"🤑\", \"🤬\",\r\n    //     \"🤡\", \"💀\", \"👽\",\r\n    //     \"👩🏾‍💻\", \"👩🏾‍🎓\", \"👩🏾‍🚀\",\r\n    //     \"💃🏽\", \"🕺🏽\", \"🕵🏽\",\r\n    //     \"🐘\", \"🦄\", \"🐆\",\r\n    //     \"🌈\", \"💐\", \"🥑\"\r\n    // ];\r\n\r\n        const EmojiDataMap = EmojiData.map(i => <EmojiCard key={i.props.id} icon={i.props.icon} />)\r\n        console.log(EmojiDataMap);\r\n    \r\n\r\n    return(\r\n        <div className=\"Iconmap\">\r\n            {EmojiDataMap}\r\n            \r\n            \r\n        </div>\r\n        \r\n\r\n    );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Emoji;","import React from 'react';\nimport Game from './component/Game';\nimport Navbar from './component/Navbar';\nimport Emoji from './pages/Emoji';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Game />\n      <Emoji />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}